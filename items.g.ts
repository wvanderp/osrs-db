// @generated FILE â€” do not edit
// Generated by: scripts/generate-types.ts

import raw from './data/items.g.json' assert { type: 'json' };

/**
 * A schema for the raw JSON provided by the runelite extractor.
 */
export type Items = {
  /**
   * The item's ID.
   */
  id?: number;
  /**
   * The item's name.
   */
  name?: string;
  /**
   * The text that appears when you examine the item.
   */
  examine?: string;
  resizeX?: number;
  resizeY?: number;
  resizeZ?: number;
  xan2d?: number;
  yan2d?: number;
  zan2d?: number;
  cost?: number;
  /**
   * Whether or not the item is tradeable.
   */
  isTradeable?: boolean;
  /**
   * Whether or not the item is stackable.
   */
  stackable?: 0 | 1;
  inventoryModel?: number;
  wearPos1?: number;
  wearPos2?: number;
  wearPos3?: number;
  /**
   * Whether or not the item is members only.
   */
  members?: boolean;
  textureFind?: number[];
  textureReplace?: number[];
  colorFind?: number[];
  colorReplace?: number[];
  zoom2d?: number;
  xOffset2d?: number;
  yOffset2d?: number;
  ambient?: number;
  contrast?: number;
  countCo?: number[];
  countObj?: number[];
  options?: (string | null)[];
  /**
   * Options for the item in the interface, such as 'Wear', 'Rub' or 'Drop', etc.
   */
  interfaceOptions?: (string | null)[];
  /**
   * Sub-options for each of the interface options.
   */
  subops?: (any[] | null)[];
  maleModel0?: number;
  maleModel1?: number;
  maleModel2?: number;
  maleOffset?: number;
  maleHeadModel?: number;
  maleHeadModel2?: number;
  femaleModel0?: number;
  femaleModel1?: number;
  femaleModel2?: number;
  femaleOffset?: number;
  femaleHeadModel?: number;
  femaleHeadModel2?: number;
  category?: number;
  notedID?: number;
  notedTemplate?: number;
  team?: number;
  weight?: number;
  shiftClickDropIndex?: number;
  boughtId?: number;
  boughtTemplateId?: number;
  placeholderId?: number;
  placeholderTemplateId?: number;
  params?: {
    [k: string]: string | number;
  };
}[];

const data = raw as unknown as Items;
export default data;
